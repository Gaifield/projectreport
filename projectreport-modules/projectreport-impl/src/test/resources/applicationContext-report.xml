<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd">

    <context:property-placeholder location="classpath*:crius.properties" ignore-unresolvable="true"/>

    <context:component-scan base-package="cn.damai.boss.projectreport" use-default-filters="false">
        <context:include-filter type="regex"
                                expression="cn.damai.boss.projectreport.report.action.*"/>
        <context:include-filter type="regex"
                                expression="cn.damai.boss.projectreport.report.service.*"/>
        <context:include-filter type="regex"
                                expression="cn.damai.boss.projectreport.report.dao.*"/>
        <context:include-filter type="regex"
                                expression="cn.damai.boss.projectreport.common.service.*"/>
        <context:include-filter type="regex"
                                expression="cn.damai.boss.projectreport.common.dao.*"/>
    </context:component-scan>

    <!-- 报表数据源 -->
    <bean id="reportDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${projectreport.jdbc.driverClassName}"/>
        <property name="url" value="${projectreport.jdbc.url}"/>
        <property name="username" value="${projectreport.jdbc.username}"/>
        <property name="password" value="${projectreport.jdbc.password}"/>
        <!--连接池启动时的初始化 -->
        <property name="initialSize" value="${projectreport.jdbc.initialSize}"/>
        <!--连接池的最大值 -->
        <property name="maxActive" value="${projectreport.jdbc.maxActive}"/>
        <!-- 最大空闲值，当经过一个高峰时间后，连接池可以慢慢将已经用不到的链接慢慢释放一部分，一直减少到maxle为止 -->
        <property name="maxIdle" value="${projectreport.jdbc.maxIdle}"/>
        <!-- 最小空闲值，当空闲的连接数少于阀值时，连接池就会预申请去一些链接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="${projectreport.jdbc.minIdle}"/>
    </bean>

    <!-- maitix只读数据源 -->
    <bean id="maitixReadOnlyDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.maitix.driver}"/>
        <property name="url" value="${jdbc.maitix.url}"/>
        <property name="username" value="${jdbc.maitix.username}"/>
        <property name="password" value="${jdbc.maitix.password}"/>
        <property name="initialSize" value="${jdbc.maitix.initialSize}"/>
        <property name="maxActive" value="${jdbc.maitix.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maitix.maxIdle}"/>
        <property name="minIdle" value="${jdbc.maitix.minIdle}"/>
    </bean>

    <!-- maitix北京数据源 -->
    <bean id="maitixBJDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.maitix.driver}"/>
        <property name="url" value="${jdbc.maitixBJ.url}"/>
        <property name="username" value="${jdbc.maitix.username}"/>
        <property name="password" value="${jdbc.maitix.password}"/>
        <property name="initialSize" value="${jdbc.maitix.initialSize}"/>
        <property name="maxActive" value="${jdbc.maitix.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maitix.maxIdle}"/>
        <property name="minIdle" value="${jdbc.maitix.minIdle}"/>
    </bean>
    <!-- maitix上海数据源 -->
    <bean id="maitixSHDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.maitix.driver}"/>
        <property name="url" value="${jdbc.maitixSH.url}"/>
        <property name="username" value="${jdbc.maitix.username}"/>
        <property name="password" value="${jdbc.maitix.password}"/>
        <property name="initialSize" value="${jdbc.maitix.initialSize}"/>
        <property name="maxActive" value="${jdbc.maitix.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maitix.maxIdle}"/>
        <property name="minIdle" value="${jdbc.maitix.minIdle}"/>
    </bean>
    <!-- maitix广州数据源 -->
    <bean id="maitixGZDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.maitix.driver}"/>
        <property name="url" value="${jdbc.maitixGZ.url}"/>
        <property name="username" value="${jdbc.maitix.username}"/>
        <property name="password" value="${jdbc.maitix.password}"/>
        <property name="initialSize" value="${jdbc.maitix.initialSize}"/>
        <property name="maxActive" value="${jdbc.maitix.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maitix.maxIdle}"/>
        <property name="minIdle" value="${jdbc.maitix.minIdle}"/>
    </bean>

    <!-- B平台数据源 -->
    <bean id="maitixBPlatformDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.maitix.driver}"/>
        <property name="url" value="${jdbc.BPlatform.url}"/>
        <property name="username" value="${jdbc.maitix.username}"/>
        <property name="password" value="${jdbc.maitix.password}"/>
        <property name="initialSize" value="${jdbc.maitix.initialSize}"/>
        <property name="maxActive" value="${jdbc.maitix.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maitix.maxIdle}"/>
        <property name="minIdle" value="${jdbc.maitix.minIdle}"/>
    </bean>
    
    <!-- 动态数据源 -->
    <bean id="dynamicDataSource" class="cn.damai.boss.projectreport.report.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="0" value-ref="reportDataSource"/>
                <entry key="1" value-ref="maitixBJDataSource"/>
                <entry key="2" value-ref="maitixSHDataSource"/>
                <entry key="3" value-ref="maitixGZDataSource"/>
                <entry key="4" value-ref="maitixReadOnlyDataSource"/>
                <entry key="5" value-ref="maitixBPlatformDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="maitixReadOnlyDataSource"/>
    </bean>

    <bean id="projectReportManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dynamicDataSource"/>
        <property name="persistenceUnitName" value="projectreport"/>
        <property name="persistenceXmlLocation" value="classpath*:META-INF/persistence.xml"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="false"/>
                <property name="showSql" value="false"/>
            </bean>
        </property>
    </bean>

    <bean id="projectReportTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="projectReportManagerFactory"/>
    </bean>

    <tx:annotation-driven transaction-manager="projectReportTransactionManager" proxy-target-class="true"/>

    <jpa:repositories base-package="cn.damai.boss.projectreport.report.dao"
                      query-lookup-strategy="create-if-not-found" repository-impl-postfix="CustomImpl"
                      entity-manager-factory-ref="projectReportManagerFactory"
                      transaction-manager-ref="projectReportTransactionManager">
    </jpa:repositories>


    <!-- maitix -->
    <bean id="maitixSessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.SQLServerDialect</prop>
            </props>
        </property>
    </bean>
    <!-- maitix配置事务管理 -->
    <bean id="maitixTransactionManager"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="maitixSessionFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="maitixTransactionManager"
                          proxy-target-class="true"/>

    <!--memcache -->
    <bean name="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">
        <constructor-arg>
            <list>
                <bean class="java.net.InetSocketAddress">
                    <constructor-arg>
                        <value>${memcached.server.address}</value>
                    </constructor-arg>
                    <constructor-arg>
                        <value>${memcached.server.port}</value>
                    </constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <constructor-arg>
            <list>
                <value>1</value>
            </list>
        </constructor-arg>
        <property name="connectionPoolSize" value="50"></property>
        <property name="opTimeout" value="50000"></property>
        <property name="commandFactory">
            <bean class="net.rubyeye.xmemcached.command.TextCommandFactory"/>
        </property>
        <property name="sessionLocator">
            <bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"/>
        </property>
        <property name="transcoder">
            <bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder"/>
        </property>
    </bean>
    <bean name="memcachedClient" factory-bean="memcachedClientBuilder"
          factory-method="build" destroy-method="shutdown"/>


    <import resource="classpath:applicationContext-dubbo.xml"/>
    <import resource="classpath:applicationContext-jms.xml"/>

</beans>